<!DOCTYPE html>
<html lang="en">
<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Bootstrap demo</title>

     <section id="CSS-primaryRepository">
          <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
               integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

          <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
               integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>

          <link rel="stylesheet" href="/static/css/browser.css">
          <link rel="stylesheet" href="/static/css/map.css">
          <link rel="stylesheet" href="/static/css/style.css">
     </section>
</head>
<body>
     <main id="map-container">
          <header id="map-navbar" class="sticky-top">
               {% include "components/navbar.html.jinja" %}
          </header>

          <section id="map"></section>

          <footer id="map-browser" class="accordion bg-info-subtle bg-transparent">
               {% if browser_publicData["given_filter"] %}
                    <button id="collapseOne-toggle" class="h2 bg-transparent accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne" data-state="1" onclick="goto_browser('collapseOne-toggle')">
                    Browser
                    </button>
               {% else %}
                    <button id="collapseTwo-toggle" class="h2 bg-transparent accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo" data-state="0" onclick="goto_browser('collapseTwo-toggle')">
                    Browser
                    </button>
               {% endif %}
          </footer>
     </main>
     <section class="OE-bg-img-cloudly-blue">
          {% if browser_publicData["given_filter"] %}
               <div id="collapseOne" class="accordion-collapse collapse show" data-bs-parent="#accordionExample">
                    <div class="accordion-body">
                         <h1>Browser</h1>

                         {% with current_route = "/map"%}
                              {% include "components/search_bar.html.jinja" %}
                         {% endwith %}
                         
                         <hr>

                         {% include "components/browser_body.html.jinja" %}
                    </div>
               </div>
          {% else %}
               <div id="collapseTwo" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                    <div class="accordion-body">
                         <h1>Browser</h1>

                         {% with current_route = "/map"%}
                              {% include "components/search_bar.html.jinja" %}
                         {% endwith %}
                         
                         <hr>

                         {% include "components/browser_body.html.jinja" %}
                    </div>
               </div>
          {% endif %}
     </section>

     <section id="JavaScript-primaryRepository">
          <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
          
          <script>

               {# function show_markers(section) {
                    let shown_markers = results[section];
                    console.log(shown_markers);
               } #}
               var map = L.map('map').setView([40.7529, -73.8163], 13);
               L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
               }).addTo(map);

               const results = {{ browser_publicData["results"] | tojson }};

               {# Load Markers #}

               for (let section in results) {
                    restoData_list = results[section]

                    if (restoData_list.length > 0) {
                         for (let resto of restoData_list) {     
                              const lat = Number(resto["lat"])
                              const lng = Number(resto["lng"])
                              const name = resto["name"]
                              const image = resto['image']
                              const resto_id = resto['restaurant_id']
                              latlng = [lat, lng]

                              L.marker(latlng).addTo(map)
                              .bindPopup(`<a id='restoMarker-${section}-${resto_id}' href='#restoCard-${section}-${resto_id}'>${name} <img src="${image}" class="card-img-top md" alt="${name}"></a>`)
                              .openPopup();
                         }
                    }
               }

               function goto_marker(lat, lng){
                    latlng = [lat, lng];

                    window.scrollTo(0, 0);
                    map.flyTo(latlng, 12, { animate: true });
                    L.marker(latlng).openPopup();
               }

               function goto_browser(id) {
                    should_go = false
                    const collapse = document.getElementById(id);
                    const collapse_state = collapse.dataset.state

                    if (collapse_state == "0" || collapse_state == "0") {
                         collapse.dataset.state = "1";


                    async function waitForCondition(checkCondition, interval = 100) {
                         return new Promise(resolve => {
                              const check = () => {
                                   if (checkCondition()) {
                                   resolve();
                                   } 
                                   else {
                                   setTimeout(check, interval);
                                   }
                              };
                              check();
                         });
                    }

                    async function myFunction() {
                    let conditionMet = false;

                    // Simulate a condition that changes after a delay
                    setTimeout(() => {
                         conditionMet = true;
                    }, 2000);

                    await waitForCondition(() => conditionMet);
                    if (window.scrollY > 0){
                    
                    }
                    else {
                         window.scrollTo(0, window.scrollY + 100);
                    }
                    
                    // Continue with the rest of your function
                    }

                    myFunction();

                    function is_expanded() {
                         if (collapse.ariaExpanded == "true") {
                              return true
                         }
                         else if (collapse.ariaExpanded == "false") {
                              return false
                         }
                         
                    }


                         
                    }
                    else if (collapse_state == "1" || collapse_state == "1") {
                         collapse.dataset.state = "0"
                    }
               }
               window.scrollTo(0, window.scrollY + 100);
          </script>

          <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
          integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
          crossorigin="anonymous"></script>

          <script src="static/javascript/script.js"></script>          
     </section>
</body>
</html>

